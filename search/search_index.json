{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ServerTap","text":"<p>ServerTap is a REST API for Bukkit, Spigot, and PaperMC Minecraft servers. It allows for server admins to query and interact with their servers using simple REST semantics.</p> <p>Head over to https://github.com/servertap-io/servertap/releases/latest to grab the latest and greatest plugin JAR.</p>"},{"location":"#discord","title":"Discord","text":"<p>Join the Discord to talk about this plugin https://discord.gg/nSWRYzBMfp</p>"},{"location":"#usage","title":"Usage","text":"<p>Install this plugin by dropping the jar into the <code>plugins/</code> directory on your server.</p> <p>Then, you can query the server using <code>curl</code> or Postman, or anything that speaks HTTP.</p> <p>For example, query for information about the server itself:</p> <pre><code>$ curl http://localhost:4567/v1/server\n</code></pre> <pre><code>{\n\"name\": \"Paper\",\n\"motd\": \"This is my MOTD\",\n\"version\": \"git-Paper-89 (MC: 1.15.2)\",\n\"bukkitVersion\": \"1.15.2-R0.1-SNAPSHOT\",\n\"health\": {\n\"cpus\": 4,\n\"uptime\": 744,\n\"totalMemory\": 2010644480,\n\"maxMemory\": 2010644480,\n\"freeMemory\": 1332389360\n},\n\"bannedIps\": [],\n\"bannedPlayers\": [\n{\n\"target\": \"phybros\",\n\"source\": \"Server\"\n}\n]\n}\n</code></pre> <p>Or get a list of players that are currently online:</p> <pre><code>$ curl http://localhost:4567/v1/players\n</code></pre> <pre><code>[\n{\n\"uuid\": \"55f584e4-f095-48e0-bb8a-eb5c87ffe494\",\n\"displayName\": \"phybros\",\n\"address\": \"localhost\",\n\"port\": 58529,\n\"exhaustion\": 3.5640976,\n\"exp\": 0.45454547,\n\"whitelisted\": false,\n\"banned\": false,\n\"op\": true\n}\n]\n</code></pre>"},{"location":"#current-endpoints","title":"Current Endpoints","text":"<p>This plugin self-hosts its own API documentation using Swagger. You can see the full API documentation at http://your-server.net:4567/swagger. You can even explore and test the API right from the UI!</p> <p>Some examples of capabilities are:</p> <ul> <li>Ping</li> <li>Server<ul> <li>Get/Add/Remove Ops</li> <li>Get/Add Whitelist</li> </ul> </li> <li>Get/Save/List Worlds</li> <li>List/Read Scoreboard(s)</li> <li>Broadcast</li> <li>List/Find Players</li> <li>Get/Pay/Debt Economy (W/ Plugin)</li> <li>List Plugins</li> </ul>"},{"location":"#tls","title":"TLS","text":"<p>ServerTap supports TLS (a.k.a. SSL) via a Java \"keystore\" file. You can generate a keystore for yourself using the <code>keytool</code> utility that ships with Java.</p> <p>Using TLS is highly recommended as it encrypts the requests and responses to/from your server on the wire.</p> <p>Example:</p> <pre><code>keytool -genkey -keyalg RSA -alias servertap -keystore selfsigned.jks -validity 365 -keysize 2048\n\nEnter keystore password:\nRe-enter new password:\nWhat is your first and last name?\n  [Unknown]:\n...\n&lt;you can mostly answer whatever you want to all these questions&gt;\n</code></pre> <p>Make sure to save the output file <code>selfsigned.jks</code> into the <code>plugins/ServerTap</code> directory</p> <p>Then in <code>config.yml</code>:</p> <pre><code>tls:\nenabled: true\nkeystore: selfsigned.jks\nkeystorePassword: testing\n</code></pre> <p>Then make sure to use <code>https://</code> when talking to the API.</p>"},{"location":"#sni","title":"SNI","text":"<p>TLS optionally supports Server Name Indication (SNI) since <code>v0.5.0</code>. Set <code>tls.sni</code> to <code>true</code> in your config to enable it (expert). 99.9% of users won't need to think about this option and can just leave it <code>false</code>.</p>"},{"location":"#authentication","title":"Authentication","text":"<p>Authentication is very rudimentary at this point. Add this to your <code>plugins/ServerTap/config.yml</code> file:</p> <pre><code>useKeyAuth: true\nkey: some-long-super-random-string\n</code></pre> <p>Then include a Header called <code>key</code> with your specified key on every request to Authenticate.</p> <p>We need help making this better! See https://github.com/servertap-io/servertap/issues/5 for more info.</p>"},{"location":"#cors","title":"CORS","text":"<p>By default, ServerTap allows cross-origin requests from any origin (<code>*</code>). To change this, change the <code>corsOrigins</code> setting in the config file.</p> <p>Example:</p> <pre><code>corsOrigins:\n- https://mysite.com\n</code></pre> <p>The setting supports as many origins as you want, just add them to the array.</p>"},{"location":"#webhooks","title":"Webhooks","text":"<p>ServerTap can send webhook messages in response to events on the server.</p> <p>To use webhooks, just define them in your <code>plugins/ServerTap/config.yml</code> file like so:</p> <pre><code>webhooks:\ndefault:\nlistener: \"https://your-webhook-target.com/whatever\"\nevents:\n- PlayerJoin\n- PlayerQuit\n</code></pre> <p>The webhook requests are <code>POST</code> containing a simple JSON payload:</p> <pre><code>{\n\"player\": {\n\"uuid\": \"55f584e4-f095-48e0-bb8a-eb5c87ffe494\",\n\"displayName\": \"phybros\",\n\"address\": \"localhost\",\n\"port\": 52809,\n\"exhaustion\": 0,\n\"exp\": 0.5714286,\n\"whitelisted\": true,\n\"banned\": false,\n\"op\": true\n},\n\"joinMessage\": \"\u00a7ephybros joined the game\",\n\"eventType\": \"PlayerJoin\"\n}\n</code></pre> <p>The available events are currently:</p> <ul> <li><code>PlayerJoin</code></li> <li><code>PlayerDeath</code></li> <li><code>PlayerChat</code></li> <li><code>PlayerKick</code></li> <li><code>PlayerQuit</code></li> </ul>"},{"location":"#websockets","title":"Websockets","text":"<p>ServerTap has a bi-directional websockets interface which allows you to receive server log lines in realtime (no polling!).</p> <p>Once connected, any server log line that goes through the normal logging filters on the server will come down the websocket in a JSON object like this:</p> <pre><code>{\n\"message\": \"\u00a76/version: \u00a7fGets the version of this server including any plugins in use\",\n\"timestampMillis\": 1631834015918,\n\"loggerName\": \"\",\n\"level\": \"INFO\"\n}\n</code></pre> <p>Note: you can use a library like ansicolors to parse the color codes for the browser.</p> <p>Connect to <code>ws://&lt;host&gt;:4567/v1/ws/console</code> (or use <code>wss://</code> if you have TLS enabled). The last 1000 server log messages will be sent to the connecting client. You can configure  the size of the server log buffer by changing <code>websocketConsoleBuffer</code> in <code>config.yml</code>.</p> <p>You can also send commands through the WS connection and they will be executed on the server.</p> <p>Warning</p> <p>If you don't have authentication enabled, you are basically opening a remote admin console to your server up to the internet (bad idea).</p>"},{"location":"#authenticating-websockets","title":"Authenticating Websockets","text":"<p>Since you can't set headers on websocket connections, you can't use the header <code>key</code> to authenticate like you can with regular API routes.</p> <p>Instead you must set a cookie called <code>x-servertap-key</code> on the page hosting the websocket connection.</p> <p>Example:</p> <pre><code>// set cookie to authenticate the connection\ndocument.cookie = \"x-servertap-key=change_me\";\nthis.ws = new WebSocket(\"ws://localhost:4567/v1/ws/console\");\nthis.ws.onopen = function() {\nconsole.log(\"Opened connection\");\n};\n</code></pre>"},{"location":"#note-if-you-dont-have-authentication-enabled-you-are-basically-opening-a-remote-admin-console-to-your-server-up-to-the-internet-bad-idea","title":"Note: If you don't have authentication enabled, you are basically opening a remote admin console to your server up to the internet (bad idea).","text":""},{"location":"#contributing-to-servertap","title":"Contributing to ServerTap","text":"<p>You need a few things to get started</p> <ul> <li>An IDE (e.g. IntelliJ)</li> <li>JDK 19</li> <li>Maven</li> </ul> <p>Then, you can build the plugin <code>jar</code> by using the <code>mvn package</code> command.</p>"}]}